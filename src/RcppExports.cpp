// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// vecmin
double vecmin(NumericVector x);
RcppExport SEXP _abundancer_vecmin(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vecmin(x));
    return rcpp_result_gen;
END_RCPP
}
// vecmax
double vecmax(NumericVector x);
RcppExport SEXP _abundancer_vecmax(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vecmax(x));
    return rcpp_result_gen;
END_RCPP
}
// all_sug
bool all_sug(LogicalVector x);
RcppExport SEXP _abundancer_all_sug(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(all_sug(x));
    return rcpp_result_gen;
END_RCPP
}
// ovln_cpp_old
NumericVector ovln_cpp_old(NumericVector theo_mz, NumericVector exp_mz, NumericVector rp);
RcppExport SEXP _abundancer_ovln_cpp_old(SEXP theo_mzSEXP, SEXP exp_mzSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theo_mz(theo_mzSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exp_mz(exp_mzSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rp(rpSEXP);
    rcpp_result_gen = Rcpp::wrap(ovln_cpp_old(theo_mz, exp_mz, rp));
    return rcpp_result_gen;
END_RCPP
}
// ovln_cpp
NumericVector ovln_cpp(NumericVector theo_mz, NumericVector exp_mz, NumericVector rp);
RcppExport SEXP _abundancer_ovln_cpp(SEXP theo_mzSEXP, SEXP exp_mzSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theo_mz(theo_mzSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exp_mz(exp_mzSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rp(rpSEXP);
    rcpp_result_gen = Rcpp::wrap(ovln_cpp(theo_mz, exp_mz, rp));
    return rcpp_result_gen;
END_RCPP
}
// ovlhn_cpp_old
double ovlhn_cpp_old(NumericVector theo_mz_ovlhn, NumericVector exp_mz_ovlhn, NumericVector theo_sn_ovlhn, NumericVector exp_sn_ovlhn, NumericVector rp_ovlhn);
RcppExport SEXP _abundancer_ovlhn_cpp_old(SEXP theo_mz_ovlhnSEXP, SEXP exp_mz_ovlhnSEXP, SEXP theo_sn_ovlhnSEXP, SEXP exp_sn_ovlhnSEXP, SEXP rp_ovlhnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theo_mz_ovlhn(theo_mz_ovlhnSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exp_mz_ovlhn(exp_mz_ovlhnSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theo_sn_ovlhn(theo_sn_ovlhnSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exp_sn_ovlhn(exp_sn_ovlhnSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rp_ovlhn(rp_ovlhnSEXP);
    rcpp_result_gen = Rcpp::wrap(ovlhn_cpp_old(theo_mz_ovlhn, exp_mz_ovlhn, theo_sn_ovlhn, exp_sn_ovlhn, rp_ovlhn));
    return rcpp_result_gen;
END_RCPP
}
// ovlhn_cpp
double ovlhn_cpp(double theo_mz_ovlhn, double exp_mz_ovlhn, double theo_sn_ovlhn, double exp_sn_ovlhn, double rp_ovlhn);
RcppExport SEXP _abundancer_ovlhn_cpp(SEXP theo_mz_ovlhnSEXP, SEXP exp_mz_ovlhnSEXP, SEXP theo_sn_ovlhnSEXP, SEXP exp_sn_ovlhnSEXP, SEXP rp_ovlhnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theo_mz_ovlhn(theo_mz_ovlhnSEXP);
    Rcpp::traits::input_parameter< double >::type exp_mz_ovlhn(exp_mz_ovlhnSEXP);
    Rcpp::traits::input_parameter< double >::type theo_sn_ovlhn(theo_sn_ovlhnSEXP);
    Rcpp::traits::input_parameter< double >::type exp_sn_ovlhn(exp_sn_ovlhnSEXP);
    Rcpp::traits::input_parameter< double >::type rp_ovlhn(rp_ovlhnSEXP);
    rcpp_result_gen = Rcpp::wrap(ovlhn_cpp(theo_mz_ovlhn, exp_mz_ovlhn, theo_sn_ovlhn, exp_sn_ovlhn, rp_ovlhn));
    return rcpp_result_gen;
END_RCPP
}
// ScoreMFA_cpp
NumericVector ScoreMFA_cpp(NumericVector vexp_mz, NumericVector vtheo_mz, NumericVector vrp, NumericVector vexp_sn, NumericVector vtheo_sn);
RcppExport SEXP _abundancer_ScoreMFA_cpp(SEXP vexp_mzSEXP, SEXP vtheo_mzSEXP, SEXP vrpSEXP, SEXP vexp_snSEXP, SEXP vtheo_snSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vexp_mz(vexp_mzSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vtheo_mz(vtheo_mzSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vrp(vrpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vexp_sn(vexp_snSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vtheo_sn(vtheo_snSEXP);
    rcpp_result_gen = Rcpp::wrap(ScoreMFA_cpp(vexp_mz, vtheo_mz, vrp, vexp_sn, vtheo_sn));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_abundancer_vecmin", (DL_FUNC) &_abundancer_vecmin, 1},
    {"_abundancer_vecmax", (DL_FUNC) &_abundancer_vecmax, 1},
    {"_abundancer_all_sug", (DL_FUNC) &_abundancer_all_sug, 1},
    {"_abundancer_ovln_cpp_old", (DL_FUNC) &_abundancer_ovln_cpp_old, 3},
    {"_abundancer_ovln_cpp", (DL_FUNC) &_abundancer_ovln_cpp, 3},
    {"_abundancer_ovlhn_cpp_old", (DL_FUNC) &_abundancer_ovlhn_cpp_old, 5},
    {"_abundancer_ovlhn_cpp", (DL_FUNC) &_abundancer_ovlhn_cpp, 5},
    {"_abundancer_ScoreMFA_cpp", (DL_FUNC) &_abundancer_ScoreMFA_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_abundancer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
